<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Session Timetable</title>
  <link rel="stylesheet" href="/css/session_timetable.css" />
  <link rel="stylesheet" href="/css/header.css" />
  <link rel="stylesheet" href="/css/footer.css" />
</head>
<body>
  <main>
    <%- include("partials/header.ejs") %>
    <div class="container">
      <h1 class="title">Session Timetable</h1>
      <div class="filter-container">
        <label for="locationFilter">Filter by Location:</label>
        <select id="locationFilter">
          <option value="all">All Locations</option>
          <% if (locations && locations.length) { %>
            <% locations.forEach(loc => { %>
              <option value="<%= loc %>"><%= loc %></option>
            <% }); %>
          <% } else { %>
            <option>No locations available</option>
          <% } %>
        </select>

        <% if (role === "trainer") { %>
          <label for="trainerFilter">Filter My Sessions:</label>
          <select id="trainerFilter">
            <option value="all">All Sessions</option>
            <option value="mySessions">My Sessions Only</option>
          </select>
        <% } %>

        <label for="activityFilter">Filter by Activity:</label>
        <select id="activityFilter">
          <option value="all">All Activities</option>
          <% if (activities && activities.length) { %>
            <% activities.forEach(activity => { %>
              <option value="<%= activity.id %>"><%= activity.name %></option>
            <% }); %>
          <% } else { %>
            <option>No activities available</option>
          <% } %>
        </select>

        <label for="trainerFilterTwo">Filter by Trainer:</label>
        <select id="trainerFilterTwo">
          <option value="all">All Trainers</option>
          <% if (trainers && trainers.length) { %>
            <% trainers.forEach(trainer => { %>
              <option value="<%= trainer.id %>">
                <%= trainer.first_name + " " + trainer.last_name %>
              </option>
            <% }); %>
          <% } else { %>
            <option>No trainers available</option>
          <% } %>
        </select>
      </div>

      <div class="timetable">
        <% 
          const today = new Date();
          today.setHours(0, 0, 0, 0);
          const sevenDays = new Date(today);
          sevenDays.setDate(today.getDate() + 7);

          const parseSessionDate = (dateStr) => {
            let dateObj = new Date(dateStr);
            if (!isNaN(dateObj.getTime())) {
              return dateObj;
            }
            const parts = dateStr.split(" ");
            if (parts.length >= 4) {
              const monthNames = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
              const monthIndex = monthNames.indexOf(parts[1]);
              const dayNum = parseInt(parts[2], 10);
              const yearNum = parseInt(parts[3], 10);
              if (monthIndex >= 0 && !isNaN(dayNum) && !isNaN(yearNum)) {
                return new Date(yearNum, monthIndex, dayNum);
              }
            }
            return null;
          };

          const futureSessions = {};
          Object.keys(sessions).forEach(dateStr => {
            const dateObj = parseSessionDate(dateStr);
            if (dateObj && dateObj >= today && dateObj <= sevenDays) {
              futureSessions[dateStr] = sessions[dateStr];
            }
          });

          if (Object.keys(futureSessions).length === 0) {
        %>
          <p class="no-sessions">There are no sessions for the next week.</p>
        <% } else { %>
          <%
            function mergeDuplicates(entries) {
              const merged = [];
              entries.forEach(e => {
                const key = e.session.start_time + '-' + e.location.id + '-' + e.activity.id;
                let existing = merged.find(m => m.key === key);
                if (!existing) {
                  const trainerMap = {};
                  e.trainers.forEach(t => {
                    const nameKey = (t.first_name + '-' + t.last_name).toLowerCase().trim();
                    trainerMap[nameKey] = t;
                  });
                  existing = {
                    key,
                    session: e.session,
                    location: e.location,
                    activity: e.activity,
                    trainers: Object.values(trainerMap),
                    sessionIds: [...e.sessionIds]
                  };
                  merged.push(existing);
                } else {
                  e.sessionIds.forEach(sid => {
                    if (!existing.sessionIds.includes(sid)) {
                      existing.sessionIds.push(sid);
                    }
                  });
                  e.trainers.forEach(t => {
                    const nameKey = (t.first_name + '-' + t.last_name).toLowerCase().trim();
                    if (!existing.trainers.find(x => (x.first_name + '-' + x.last_name).toLowerCase().trim() === nameKey)) {
                      existing.trainers.push(t);
                    }
                  });
                }
              });
              return merged;
            }
          %>

          <% 
            Object.keys(futureSessions)
              .sort((a, b) => new Date(a) - new Date(b))
              .forEach(day => {
                const activitiesForDay = futureSessions[day];
                let allSessionsForDay = [];
                Object.keys(activitiesForDay).forEach(activityName => {
                  allSessionsForDay.push(...activitiesForDay[activityName]);
                });
                allSessionsForDay.sort((a, b) => {
                  const tA = parseInt(a.session.start_time.replace(':', ''), 10);
                  const tB = parseInt(b.session.start_time.replace(':', ''), 10);
                  return tA - tB;
                });
                const mergedSessions = mergeDuplicates(allSessionsForDay);
          %>
                <div class="day">
                  <h2><%= new Date(day).toDateString() %></h2>
                  <% mergedSessions.forEach(entry => { %>
                    <div class="session-row"
                         data-location="<%= entry.location.name %>"
                         data-activity-id="<%= entry.activity.id %>"
                         data-trainer-ids="<%= entry.trainers.map(t => t.id).join(',') %>"
                    >
                      <span class="session-name"><%= entry.activity.name %></span>
                      <span class="session-time">Time: <%= entry.session.start_time %></span>
                      <span class="session-location">üìç <%= entry.location.name %></span>
                      <span class="session-trainer">
                        <% entry.trainers.forEach(t => { %>
                          <div>üë§ <%= t.first_name + " " + t.last_name %></div>
                        <% }) %>
                      </span>
                      <% if (role === "member") { %>
                        <a href="/booking/book_session/<%= entry.sessionIds[0] %>"
                           class="book-session-button">
                          Book ‚Üí
                        </a>
                      <% } %>
                    </div>
                  <% }) %>
                </div>
          <% }); %>
        <% } %>
      </div>
    </div>

    <script>
      const locationFilter = document.getElementById('locationFilter');
      const activityFilter = document.getElementById('activityFilter');
      const trainerFilter = document.getElementById('trainerFilter');
      const trainerFilterTwo = document.getElementById('trainerFilterTwo');

      if (locationFilter) locationFilter.addEventListener('change', filterSessions);
      if (activityFilter) activityFilter.addEventListener('change', filterSessions);
      if (trainerFilter) trainerFilter.addEventListener('change', filterSessions);
      if (trainerFilterTwo) trainerFilterTwo.addEventListener('change', filterSessions);

      function filterSessions() {
        const selectedLocation = locationFilter ? locationFilter.value : 'all';
        const selectedActivity = activityFilter ? activityFilter.value : 'all';
        const mySessionsFilter = trainerFilter ? trainerFilter.value : 'all';
        const specificTrainerFilter = trainerFilterTwo ? trainerFilterTwo.value : 'all';
        const currentUserId = '<%= authenticatedUser ? authenticatedUser.id : "" %>';

        document.querySelectorAll('.day').forEach(day => {
          let hasVisibleSession = false;
          day.querySelectorAll('.session-row').forEach(row => {
            const locationMatch = (selectedLocation === 'all' || row.dataset.location === selectedLocation);
            const activityMatch = (selectedActivity === 'all' || row.dataset.activityId == selectedActivity);
            let trainerMatch = true;
            const rowTrainerIds = row.dataset.trainerIds ? row.dataset.trainerIds.split(',') : [];
            
            if (mySessionsFilter === 'mySessions') {
              trainerMatch = rowTrainerIds.includes(currentUserId);
            }
            if (specificTrainerFilter !== 'all') {
              trainerMatch = trainerMatch && rowTrainerIds.includes(specificTrainerFilter);
            }
            if (locationMatch && activityMatch && trainerMatch) {
              row.style.display = 'flex';
              hasVisibleSession = true;
            } else {
              row.style.display = 'none';
            }
          });
          day.style.display = hasVisibleSession ? 'block' : 'none';
        });
      }
      window.addEventListener('DOMContentLoaded', filterSessions);
    </script>
    <%- include("partials/footer.ejs") %>
  </main>
</body>
</html>
